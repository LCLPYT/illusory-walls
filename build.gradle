plugins {
	id 'fabric-loom' version '1.1.8'
	id 'maven-publish'
	id 'gradle-build-utils' version '1.2.1'
}

Properties props = loadProperties.call('publish.properties') as Properties

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = gitVersion.call()
group = project.maven_group

repositories {
    mavenCentral()

    maven {
        url "https://repo.lclpnet.work/repository/internal"
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        illwalls {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation "work.lclpnet.mods.kibu:kibu-schematic-api:${project.kibu_schematic_api_version}"
    implementation "work.lclpnet.mods.kibu:kibu-nbt-api:${project.kibu_nbt_api_version}"

    if (project.hasProperty('sodium_version')) {
        modImplementation "maven.modrinth:sodium:${project.sodium_version}"
    }

    if (project.hasProperty('iris_version')) {
        modImplementation "maven.modrinth:iris:${project.iris_version}"
        implementation "org.anarres:jcpp:1.4.14"
        implementation "io.github.douira:glsl-transformer:2.0.0-pre9"
        implementation "org.antlr:antlr4-runtime:4.11.1"
    }

    /* other Java dependencies */
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            from components.java

            pom {
                name = 'Illusory Walls'
                description = 'A Fabric mod to add illusory walls from the Dark Souls series to Minecraft'
            }
        }
    }

    repositories {
        maven {
            def env = System.getenv()
            if (Arrays.stream("DEPLOY_URL", "DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
                credentials {
                    username env.get("DEPLOY_USER")
                    password env.get("DEPLOY_PASSWORD")
                }
                url env.get("DEPLOY_URL")
            }
            else if (Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
                credentials {
                    username props.getProperty('mavenUser')
                    password props.getProperty('mavenPassword')
                }
                url props.getProperty('mavenHost')
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}